{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOU51CixyUyve7ZscNnF1Jo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"sknpcAVdMeEz"},"outputs":[],"source":[]},{"cell_type":"code","source":["# Importando pacotes\n","\n","import sys\n","import streamlit as st\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","desafioData = None  # Inicializa a variável desafioData globalmente\n","num_alternatives = None  # Inicializa a variável num_alternatives globalmente\n","alternative_names = None\n","desafioNormalAll = []  # Inicializa a variável desafioNormalAll globalmente\n","alternativasList = None"],"metadata":{"id":"C1zCiFIObGQ1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Criando as funções matemáticas\n","def NormalizingConsistency(dataP):\n","    resultP = dataP.copy()\n","    columnsP = resultP.columns.tolist()\n","    for x in columnsP:\n","        resultP[x] = resultP[x] / sum(resultP[x])\n","    return resultP\n","\n","def NormalizingCritera(dataP):\n","    resultP = dataP.copy()\n","    columnsP = resultP.columns.tolist()\n","    resultP[\"Csoma\"] = 0\n","    for x in columnsP:\n","        resultP[x] = resultP[x] / sum(resultP[x])\n","        resultP[\"Csoma\"] += resultP[x]\n","\n","    resultP['MatrizdePeso'] = resultP[\"Csoma\"] / len(columnsP)\n","    return resultP\n","\n","def DadosSaaty(lamb, N):\n","    ri = [0, 0, 0.58, 0.9, 1.12, 1.32, 1.35, 1.41, 1.45, 1.49, 1.52, 1.54, 1.56, 1.58, 1.59]\n","    ci = (lamb - N) / (N - 1)\n","    cr = ci / ri[N]\n","    if cr > 0.1:\n","        print('Inconsistente: %.2f' % cr)\n","    else:\n","        print('É Consistente: %.2f' % cr)\n","\n","def VV(Consistencia):\n","    l, v = np.linalg.eig(Consistencia)\n","    v = v.T\n","    i = np.where(l == np.max(l))[0][0]\n","    l = l[i]\n","    v = v[i]\n","    v = v / np.sum(v)\n","    return np.real(l), np.real(v)\n","\n","def get_comparison_matrix(n, names):\n","    matrix = np.zeros((n, n))\n","    for i in range(n):\n","        for j in range(i + 1, n):\n","            print(f\"O quão preferível o critério {names[i]} é em relação a {names[j]}:\")\n","            value = float(input(\"Insira o valor de comparação (de 1 a 9): \"))\n","            matrix[i][j] = value\n","            matrix[j][i] = 1 / value\n","    np.fill_diagonal(matrix, 1)  # Preencher a diagonal principal com 1\n","    return matrix\n"],"metadata":{"id":"v0WxDUr6bNJ7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Criando as funções para o AHP\n","def exibir_tabela_comparacao_criterios(nomes, matriz):\n","    df = pd.DataFrame(matriz, index=nomes, columns=nomes)\n","    df = df.round(2)  # Arredondar para duas casas decimais\n","    print(\"\\nTabela de Comparação dos Critérios:\")\n","    print(df.to_string())\n","\n","def exibir_tabela_comparacao_alternativas(nomes, matriz, criterio_nome):\n","    df = pd.DataFrame(matriz, index=nomes, columns=nomes)\n","    df = df.round(2)  # Arredondar para duas casas decimais\n","    print(f\"\\nTabela de Comparação das Alternativas para o critério '{criterio_nome}':\")\n","    print(df.to_string())\n","\n","def processar_matriz_alternativas(matriz, criterio_nome):\n","    # Normaliza a matriz\n","    normalizada = NormalizingConsistency(pd.DataFrame(matriz, columns=alternative_names, index=alternative_names))\n","    print(f\"\\nMatriz de comparação em pares das alternativas para o critério '{criterio_nome}' normalizada:\")\n","    print(normalizada)\n","\n","    # Teste de consistência\n","    print(f\"\\nTeste de consistência para o critério '{criterio_nome}':\")\n","    Consistencia = normalizada.to_numpy()\n","    l, v = VV(Consistencia)\n","    print('Autovalor: %.2f' % l)\n","    print('Autovetor: ', np.round(v, 2))\n","    DadosSaaty(l, Consistencia.shape[0])\n","\n","    # Vetor de peso\n","    peso = NormalizingCritera(pd.DataFrame(matriz, columns=alternative_names, index=alternative_names))\n","    print(f\"\\nVetor de peso para o critério '{criterio_nome}':\")\n","    print(peso)\n","\n","    return peso[['MatrizdePeso']]\n","\n","def finalizar_matriz_priorizacao_alternativas(desafioNormalAll, criteriosList, alternativasList):\n","    matrizPriorizacaoAlternativas = pd.DataFrame(desafioNormalAll[0]['MatrizdePeso'])\n","    matrizPriorizacaoAlternativas.columns = ['Peso dos Critérios']\n","\n","    for alt in alternativasList:\n","        auxList = []\n","        for crit in criteriosList:\n","            i = criteriosList.index(crit) + 1\n","            auxList.append(desafioNormalAll[i]['MatrizdePeso'][alt])\n","        matrizPriorizacaoAlternativas[alt] = auxList\n","\n","    print(\"\\nMatriz de Priorização de todas as alternativas:\")\n","    print(matrizPriorizacaoAlternativas)\n","    return matrizPriorizacaoAlternativas\n"],"metadata":{"id":"NVIF36zMICPr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def main():\n","    global desafioData, num_alternatives, alternative_names, num_criteria, criteria_names, desafioNormalAll  # Atribui a variável ao escopo global\n","    num_alternatives = int(input(\"Quantas alternativas você deseja avaliar? Inclua no mínimo 2 \"))\n","    num_criteria = int(input(\"Quantos critérios você deseja usar na avaliação? \"))\n","\n","    # Nome dos critérios\n","    criteria_names = []\n","    for i in range(num_criteria):\n","        criteria_name = input(f\"Informe o nome do critério {i + 1}: \")\n","        criteria_names.append(criteria_name)\n","\n","    # Nome das alternativas\n","    alternative_names = []\n","    for i in range(num_alternatives):\n","        alternative_name = input(f\"Informe o nome da alternativa {i + 1}: \")\n","        alternative_names.append(alternative_name)\n","\n","    # Matriz de comparação par a par para critérios\n","    print(\"\\nInsira as comparações par a par para os critérios:\")\n","    matrix_criteria = get_comparison_matrix(num_criteria, criteria_names)\n","    desafioData = pd.DataFrame(matrix_criteria, index=criteria_names, columns=criteria_names)\n","    desafioData = desafioData.round(2)  # Arredondar para duas casas decimais\n","\n","    print(\"\\nMatriz de comparação em pares dos critérios:\")\n","    print(desafioData)\n","\n","    # Normaliza dados\n","    normalizandocriterio = NormalizingConsistency(desafioData)\n","    print(\"\\nMatriz de comparação em pares dos critérios normalizada:\")\n","    print(normalizandocriterio)\n","\n","    # Teste de consistência\n","    print(\"\\nTeste de consistência:\")\n","    Consistencia1 = normalizandocriterio.to_numpy()\n","    l, v = VV(Consistencia1)\n","    print('Autovalor: %.2f' % l)\n","    print('Autovetor: ', np.round(v, 2))\n","    DadosSaaty(l, Consistencia1.shape[0])\n","\n","    # Código para obter dados, criar e normalizar matrizes, etc\n","    TabelaPesoDosCriterios = NormalizingCritera(desafioData)\n","    desafioNormalAll.append(TabelaPesoDosCriterios)\n","\n","    print(\"\\nVetor de peso dos criterios:\")\n","    print(TabelaPesoDosCriterios)\n","\n","    # Gráfico de colunas dos valores normalizados dos critérios e MatrizdePeso\n","    plt.figure(figsize=(12, 6))  # largura e altura\n","    plt.title(\"Matriz de peso dos critérios\", fontsize=20)\n","\n","    # Plotando o gráfico com seaborn\n","    ax = sns.barplot(x=TabelaPesoDosCriterios.index, y='MatrizdePeso', data=TabelaPesoDosCriterios, legend=False)\n","\n","    # Adicionando rótulos às barras\n","    for p in ax.patches:\n","        height = p.get_height()\n","        ax.text(p.get_x() + p.get_width() / 2, height, '{:.2f}'.format(height),\n","                ha='center', va='bottom', fontsize=10)\n","\n","    plt.xlabel('Critérios', fontsize=12)\n","    plt.ylabel('Pesos', fontsize=12)\n","    plt.xticks(rotation=45, ha='right', fontsize=12)\n","    plt.yticks(fontsize=12)\n","    plt.tight_layout()\n","    plt.show()\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"BO8nTzYs4cGC","executionInfo":{"status":"ok","timestamp":1726060676968,"user_tz":180,"elapsed":173578,"user":{"displayName":"Jaqueline Alves","userId":"11461314220044733722"}},"outputId":"2fc66280-4d38-4bcd-992b-0777f434ee0d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Quantas alternativas você deseja avaliar? Inclua no mínimo 2 2\n","Quantos critérios você deseja usar na avaliação? 3\n","Informe o nome do critério 1: preço\n","Informe o nome do critério 2: seguro\n","Informe o nome do critério 3: segurança\n","Informe o nome da alternativa 1: ferrari\n","Informe o nome da alternativa 2: Fiat 365\n","\n","Insira as comparações par a par para os critérios:\n","O quão preferível o critério preço é em relação a seguro:\n","Insira o valor de comparação (de 1 a 9): 5\n","O quão preferível o critério preço é em relação a segurança:\n","Insira o valor de comparação (de 1 a 9): 3\n","O quão preferível o critério seguro é em relação a segurança:\n","Insira o valor de comparação (de 1 a 9): 3\n","\n","Matriz de comparação em pares dos critérios:\n","           preço  seguro  segurança\n","preço       1.00    5.00        3.0\n","seguro      0.20    1.00        3.0\n","segurança   0.33    0.33        1.0\n","\n","Matriz de comparação em pares dos critérios normalizada:\n","              preço    seguro  segurança\n","preço      0.653595  0.789889   0.428571\n","seguro     0.130719  0.157978   0.428571\n","segurança  0.215686  0.052133   0.142857\n","\n","Teste de consistência:\n","Autovalor: 1.00\n","Autovetor:  [0.64 0.19 0.17]\n","É Consistente: -1.11\n","\n","Vetor de peso dos criterios:\n","              preço    seguro  segurança     Csoma  MatrizdePeso\n","preço      0.653595  0.789889   0.428571  1.872056      0.624019\n","seguro     0.130719  0.157978   0.428571  0.717268      0.239089\n","segurança  0.215686  0.052133   0.142857  0.410676      0.136892\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["15# Matriz de comparação par a par para alternativas para cada critério\n","alternativas_por_criterio = {}  # Dicionário para armazenar as tabelas\n","for i in range(num_criteria):\n","    criterio_nome = criteria_names[i]\n","    print(f\"\\nInsira a matriz de priorizações par a par de cada alternativa para o critério {i + 1} ({criterio_nome}):\")\n","    DadosCriterio = get_comparison_matrix(num_alternatives, alternative_names)\n","    exibir_tabela_comparacao_alternativas(alternative_names, DadosCriterio, criterio_nome)\n","    # Processar a matriz de alternativas\n","    peso_criterio = processar_matriz_alternativas(DadosCriterio, criterio_nome)\n","    desafioNormalAll.append(peso_criterio)\n","\n","# Finalizando a Matriz de Priorização de todas alternativas\n","matrizPriorizacaoAlternativas = finalizar_matriz_priorizacao_alternativas(desafioNormalAll, criteria_names, alternative_names)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T3fEygkHNGyN","executionInfo":{"status":"ok","timestamp":1723821593117,"user_tz":180,"elapsed":51903,"user":{"displayName":"Jaqueline Alves","userId":"11461314220044733722"}},"outputId":"ceabf68a-0527-4029-bcab-0a93dec04819"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Insira a matriz de priorizações par a par de cada alternativa para o critério 1 (atender preço):\n","O quão preferível o critério Ap Sao conrrado é em relação a Ap Recreio:\n","Insira o valor de comparação (de 1 a 9): 2\n","O quão preferível o critério Ap Sao conrrado é em relação a Barra:\n","Insira o valor de comparação (de 1 a 9): 1\n","O quão preferível o critério Ap Recreio é em relação a Barra:\n","Insira o valor de comparação (de 1 a 9): 5\n","\n","Tabela de Comparação das Alternativas para o critério 'atender preço':\n","                 Ap Sao conrrado  Ap Recreio  Barra\n","Ap Sao conrrado              1.0         2.0    1.0\n","Ap Recreio                   0.5         1.0    5.0\n","Barra                        1.0         0.2    1.0\n","\n","Matriz de comparação em pares das alternativas para o critério 'atender preço' normalizada:\n","                 Ap Sao conrrado  Ap Recreio     Barra\n","Ap Sao conrrado              0.4      0.6250  0.142857\n","Ap Recreio                   0.2      0.3125  0.714286\n","Barra                        0.4      0.0625  0.142857\n","\n","Teste de consistência para o critério 'atender preço':\n","Autovalor: 1.00\n","Autovetor:  [0.42 0.35 0.22]\n","É Consistente: -1.11\n","\n","Vetor de peso para o critério 'atender preço':\n","                 Ap Sao conrrado  Ap Recreio     Barra     Csoma  MatrizdePeso\n","Ap Sao conrrado              0.4      0.6250  0.142857  1.167857      0.389286\n","Ap Recreio                   0.2      0.3125  0.714286  1.226786      0.408929\n","Barra                        0.4      0.0625  0.142857  0.605357      0.201786\n","\n","Insira a matriz de priorizações par a par de cada alternativa para o critério 2 (tamanho):\n","O quão preferível o critério Ap Sao conrrado é em relação a Ap Recreio:\n","Insira o valor de comparação (de 1 a 9): 7\n","O quão preferível o critério Ap Sao conrrado é em relação a Barra:\n","Insira o valor de comparação (de 1 a 9): 5\n","O quão preferível o critério Ap Recreio é em relação a Barra:\n","Insira o valor de comparação (de 1 a 9): 9\n","\n","Tabela de Comparação das Alternativas para o critério 'tamanho':\n","                 Ap Sao conrrado  Ap Recreio  Barra\n","Ap Sao conrrado             1.00        7.00    5.0\n","Ap Recreio                  0.14        1.00    9.0\n","Barra                       0.20        0.11    1.0\n","\n","Matriz de comparação em pares das alternativas para o critério 'tamanho' normalizada:\n","                 Ap Sao conrrado  Ap Recreio     Barra\n","Ap Sao conrrado         0.744681    0.863014  0.333333\n","Ap Recreio              0.106383    0.123288  0.600000\n","Barra                   0.148936    0.013699  0.066667\n","\n","Teste de consistência para o critério 'tamanho':\n","Autovalor: 1.00\n","Autovetor:  [0.72 0.17 0.12]\n","É Consistente: -1.11\n","\n","Vetor de peso para o critério 'tamanho':\n","                 Ap Sao conrrado  Ap Recreio     Barra     Csoma  MatrizdePeso\n","Ap Sao conrrado         0.744681    0.863014  0.333333  1.941028      0.647009\n","Ap Recreio              0.106383    0.123288  0.600000  0.829671      0.276557\n","Barra                   0.148936    0.013699  0.066667  0.229301      0.076434\n","\n","Insira a matriz de priorizações par a par de cada alternativa para o critério 3 (Qualidade da construção):\n","O quão preferível o critério Ap Sao conrrado é em relação a Ap Recreio:\n","Insira o valor de comparação (de 1 a 9): 5\n","O quão preferível o critério Ap Sao conrrado é em relação a Barra:\n","Insira o valor de comparação (de 1 a 9): 2\n","O quão preferível o critério Ap Recreio é em relação a Barra:\n","Insira o valor de comparação (de 1 a 9): 8\n","\n","Tabela de Comparação das Alternativas para o critério 'Qualidade da construção':\n","                 Ap Sao conrrado  Ap Recreio  Barra\n","Ap Sao conrrado              1.0        5.00    2.0\n","Ap Recreio                   0.2        1.00    8.0\n","Barra                        0.5        0.12    1.0\n","\n","Matriz de comparação em pares das alternativas para o critério 'Qualidade da construção' normalizada:\n","                 Ap Sao conrrado  Ap Recreio     Barra\n","Ap Sao conrrado         0.588235    0.816327  0.181818\n","Ap Recreio              0.117647    0.163265  0.727273\n","Barra                   0.294118    0.020408  0.090909\n","\n","Teste de consistência para o critério 'Qualidade da construção':\n","Autovalor: 1.00\n","Autovetor:  [0.57 0.24 0.19]\n","É Consistente: -1.11\n","\n","Vetor de peso para o critério 'Qualidade da construção':\n","                 Ap Sao conrrado  Ap Recreio     Barra     Csoma  MatrizdePeso\n","Ap Sao conrrado         0.588235    0.816327  0.181818  1.586380      0.528793\n","Ap Recreio              0.117647    0.163265  0.727273  1.008185      0.336062\n","Barra                   0.294118    0.020408  0.090909  0.405435      0.135145\n","\n","Insira a matriz de priorizações par a par de cada alternativa para o critério 4 (Ap Barra):\n","O quão preferível o critério Ap Sao conrrado é em relação a Ap Recreio:\n","Insira o valor de comparação (de 1 a 9): 5\n","O quão preferível o critério Ap Sao conrrado é em relação a Barra:\n","Insira o valor de comparação (de 1 a 9): 9\n","O quão preferível o critério Ap Recreio é em relação a Barra:\n","Insira o valor de comparação (de 1 a 9): 1\n","\n","Tabela de Comparação das Alternativas para o critério 'Ap Barra':\n","                 Ap Sao conrrado  Ap Recreio  Barra\n","Ap Sao conrrado             1.00         5.0    9.0\n","Ap Recreio                  0.20         1.0    1.0\n","Barra                       0.11         1.0    1.0\n","\n","Matriz de comparação em pares das alternativas para o critério 'Ap Barra' normalizada:\n","                 Ap Sao conrrado  Ap Recreio     Barra\n","Ap Sao conrrado         0.762712    0.714286  0.818182\n","Ap Recreio              0.152542    0.142857  0.090909\n","Barra                   0.084746    0.142857  0.090909\n","\n","Teste de consistência para o critério 'Ap Barra':\n","Autovalor: 1.00\n","Autovetor:  [0.76 0.15 0.09]\n","É Consistente: -1.11\n","\n","Vetor de peso para o critério 'Ap Barra':\n","                 Ap Sao conrrado  Ap Recreio     Barra     Csoma  MatrizdePeso\n","Ap Sao conrrado         0.762712    0.714286  0.818182  2.295179      0.765060\n","Ap Recreio              0.152542    0.142857  0.090909  0.386309      0.128770\n","Barra                   0.084746    0.142857  0.090909  0.318512      0.106171\n","\n","Matriz de Priorização de todas as alternativas:\n","                         Peso dos Critérios  Ap Sao conrrado  Ap Recreio  \\\n","atender preço                      0.601252         0.389286    0.408929   \n","tamanho                            0.167814         0.647009    0.276557   \n","Qualidade da construção            0.149715         0.528793    0.336062   \n","Ap Barra                           0.081219         0.765060    0.128770   \n","\n","                            Barra  \n","atender preço            0.201786  \n","tamanho                  0.076434  \n","Qualidade da construção  0.135145  \n","Ap Barra                 0.106171  \n"]}]},{"cell_type":"code","source":["# Calculando a soma ponderada para cada coluna (alternativa)\n","peso_dos_criterios = matrizPriorizacaoAlternativas['Peso dos Critérios'].values\n","soma_ponderada = {}\n","\n","for alternativa in alternative_names:\n","    soma_ponderada[alternativa] = np.sum(matrizPriorizacaoAlternativas[alternativa].values * peso_dos_criterios)\n","\n","# Adicionando a linha \"soma\" ao DataFrame\n","soma_ponderada_series = pd.Series(soma_ponderada, name='soma')\n","matrizPriorizacaoAlternativas = pd.concat([matrizPriorizacaoAlternativas, soma_ponderada_series.to_frame().T])\n","\n","# Excluindo a coluna \"Peso dos Critérios\"\n","matrizPriorizacaoAlternativas = matrizPriorizacaoAlternativas.drop(columns=['Peso dos Critérios'])\n","\n","\n","# Exibindo a matriz atualizada\n","print(matrizPriorizacaoAlternativas)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hPNQBZpeWvT_","executionInfo":{"status":"ok","timestamp":1723821601120,"user_tz":180,"elapsed":419,"user":{"displayName":"Jaqueline Alves","userId":"11461314220044733722"}},"outputId":"22521bdb-803a-44b4-f080-c7c19c4f3322"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                         Ap Sao conrrado  Ap Recreio     Barra\n","atender preço                   0.389286    0.408929  0.201786\n","tamanho                         0.647009    0.276557  0.076434\n","Qualidade da construção         0.528793    0.336062  0.135145\n","Ap Barra                        0.765060    0.128770  0.106171\n","soma                            0.483942    0.353051  0.163007\n"]}]},{"cell_type":"code","source":["#Descobrindo o tipo da variável\n","print(type(matrizPriorizacaoAlternativas))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dSLPNLu-o_Vg","executionInfo":{"status":"ok","timestamp":1723821614849,"user_tz":180,"elapsed":392,"user":{"displayName":"Jaqueline Alves","userId":"11461314220044733722"}},"outputId":"f658f451-e190-4632-e73b-4699e9a67844"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n"]}]},{"cell_type":"code","source":["# Convertendo a matriz para um array NumPy\n","matriz_np = np.array(matrizPriorizacaoAlternativas)\n","\n","# Convertendo o array NumPy para um DataFrame\n","matriz_df = pd.DataFrame(matriz_np, columns=matrizPriorizacaoAlternativas.columns, index=matrizPriorizacaoAlternativas.index)\n","\n","# Função para formatar valores com vírgulas\n","def format_with_comma(value):\n","    return f\"{value:.6f}\".replace('.', ',')\n","\n","# Aplicando a formatação ao DataFrame\n","matriz_df_formatted = matriz_df.applymap(format_with_comma)\n","\n","# Imprimindo o DataFrame final\n","print(matriz_df_formatted)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FHQWVAL-Ec2H","executionInfo":{"status":"ok","timestamp":1723821618022,"user_tz":180,"elapsed":496,"user":{"displayName":"Jaqueline Alves","userId":"11461314220044733722"}},"outputId":"216e008a-9561-4d4a-aaee-3c220e37cac4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                        Ap Sao conrrado Ap Recreio     Barra\n","atender preço                  0,389286   0,408929  0,201786\n","tamanho                        0,647009   0,276557  0,076434\n","Qualidade da construção        0,528793   0,336062  0,135145\n","Ap Barra                       0,765060   0,128770  0,106171\n","soma                           0,483942   0,353051  0,163007\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-04e0bf481ec2>:12: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n","  matriz_df_formatted = matriz_df.applymap(format_with_comma)\n"]}]},{"cell_type":"code","source":["# Extraindo a última linha do DataFrame\n","ultima_linha = matriz_df_formatted.iloc[-1]\n","\n","# Classificando os valores da última linha\n","ranking = ultima_linha.rank(ascending=False, method='min').astype(int)\n","\n","# Transformando o ranking em um DataFrame\n","ranking_matriz_df_formatted = ranking.reset_index()\n","ranking_matriz_df_formatted.columns = ['Coluna', 'Ranking']\n","ranking_matriz_df_formatted = ranking_matriz_df_formatted.sort_values(by='Ranking')\n","\n","print(ranking_matriz_df_formatted)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qz2Vr1Z09HWo","executionInfo":{"status":"ok","timestamp":1723821620694,"user_tz":180,"elapsed":336,"user":{"displayName":"Jaqueline Alves","userId":"11461314220044733722"}},"outputId":"6ced67a1-4734-49be-b67f-754f1c2d1078"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["            Coluna  Ranking\n","0  Ap Sao conrrado        1\n","1       Ap Recreio        2\n","2            Barra        3\n"]}]},{"cell_type":"code","source":["# prompt: ajuste para aparecer no ranking_matriz_df_formatted a coluna com o valor de ultima_linha ao lado na coluna Ranking\n","\n","ranking_matriz_df_formatted['Valor'] = ultima_linha.values\n","print(ranking_matriz_df_formatted)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6ANimU0MFx6v","executionInfo":{"status":"ok","timestamp":1723821625469,"user_tz":180,"elapsed":296,"user":{"displayName":"Jaqueline Alves","userId":"11461314220044733722"}},"outputId":"c91dd914-8f2b-4b9e-9165-4881b1c91ed3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["            Coluna  Ranking     Valor\n","0  Ap Sao conrrado        1  0,483942\n","1       Ap Recreio        2  0,353051\n","2            Barra        3  0,163007\n"]}]}]}
